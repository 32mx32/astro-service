import { useState, useEffect, useRef } from 'react';

// React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
export default function ParticleAnimation({ text = 'ASTRO', className = '' }) {
  // –°—Å—ã–ª–∫–∞ –Ω–∞ canvas —ç–ª–µ–º–µ–Ω—Ç
  const canvasRef = useRef(null);
  // –°—Å—ã–ª–∫–∞ –Ω–∞ input –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const inputRef = useRef(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  const [canvasText, setCanvasText] = useState(text);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  const [radius, setRadius] = useState(1);
  // –•—Ä–∞–Ω–∏–º —á–∞—Å—Ç–∏—Ü—ã –∏ —Ü–≤–µ—Ç–∞ –≤ refs
  const particlesRef = useRef([]);
  const colorsRef = useRef([]);
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
  const mouseRef = useRef({ x: 0, y: 0 });
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
  const ctxRef = useRef(null);
  // –†–∞–∑–º–µ—Ä—ã canvas
  const dimensionsRef = useRef({ width: 0, height: 0 });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏–∑ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  const getParticleColors = () => {
    if (typeof window === 'undefined') return ['#ffffff'];
    
    const colorsString = getComputedStyle(document.documentElement)
      .getPropertyValue('--particle-colors')
      .trim();
    return colorsString.split(',').map(color => color.trim());
  };
  
  // –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü—ã
  class Particle {
    constructor(x, y) {
      this.x = Math.random() * dimensionsRef.current.width;
      this.y = Math.random() * dimensionsRef.current.height;
      this.dest = { x, y };
      this.r = Math.random() * 5 + 2;
      this.vx = (Math.random() - 0.5) * 20;
      this.vy = (Math.random() - 0.5) * 20;
      this.accX = 0;
      this.accY = 0;
      this.friction = Math.random() * 0.05 + 0.94;
      this.color = colorsRef.current[Math.floor(Math.random() * colorsRef.current.length)];
    }
    
    render() {
      this.accX = (this.dest.x - this.x) / 1000;
      this.accY = (this.dest.y - this.y) / 1000;
      this.vx += this.accX;
      this.vy += this.accY;
      this.vx *= this.friction;
      this.vy *= this.friction;
      
      this.x += this.vx;
      this.y += this.vy;
      
      ctxRef.current.fillStyle = this.color;
      ctxRef.current.beginPath();
      ctxRef.current.arc(this.x, this.y, this.r, Math.PI * 2, false);
      ctxRef.current.fill();
      
      const a = this.x - mouseRef.current.x;
      const b = this.y - mouseRef.current.y;
      
      const distance = Math.sqrt(a*a + b*b);
      if (distance < (radius * 70)) {
        this.accX = (this.x - mouseRef.current.x) / 100;
        this.accY = (this.y - mouseRef.current.y) / 100;
        this.vx += this.accX;
        this.vy += this.accY;
      }
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
  const initScene = () => {
    if (!canvasRef.current || !ctxRef.current) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞
    colorsRef.current = getParticleColors();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
    dimensionsRef.current = {
      width: window.innerWidth,
      height: window.innerHeight
    };
    
    canvasRef.current.width = dimensionsRef.current.width;
    canvasRef.current.height = dimensionsRef.current.height;
    
    // –û—á–∏—â–∞–µ–º canvas
    ctxRef.current.clearRect(0, 0, dimensionsRef.current.width, dimensionsRef.current.height);
    
    // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç (–Ω–µ–≤–∏–¥–∏–º—ã–π, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏—Ü)
    ctxRef.current.font = `bold ${dimensionsRef.current.width / 10}px sans-serif`;
    ctxRef.current.textAlign = "center";
    ctxRef.current.fillText(canvasText, dimensionsRef.current.width / 2, dimensionsRef.current.height / 2);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageData = ctxRef.current.getImageData(0, 0, dimensionsRef.current.width, dimensionsRef.current.height).data;
    ctxRef.current.clearRect(0, 0, dimensionsRef.current.width, dimensionsRef.current.height);
    ctxRef.current.globalCompositeOperation = "screen";
    
    // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
    particlesRef.current = [];
    for (let i = 0; i < dimensionsRef.current.width; i += Math.round(dimensionsRef.current.width / 150)) {
      for (let j = 0; j < dimensionsRef.current.height; j += Math.round(dimensionsRef.current.width / 150)) {
        if (imageData[((i + j * dimensionsRef.current.width) * 4) + 3] > 150) {
          particlesRef.current.push(new Particle(i, j));
        }
      }
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const animate = () => {
    if (!canvasRef.current || !ctxRef.current) return;
    
    requestAnimationFrame(animate);
    ctxRef.current.clearRect(0, 0, dimensionsRef.current.width, dimensionsRef.current.height);
    
    for (let i = 0; i < particlesRef.current.length; i++) {
      particlesRef.current[i].render();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏/–∫–∞—Å–∞–Ω–∏—è
  const handleMouseMove = (e) => {
    mouseRef.current = { x: e.clientX, y: e.clientY };
  };
  
  const handleTouchMove = (e) => {
    if (e.touches.length > 0) {
      mouseRef.current = { x: e.touches[0].clientX, y: e.touches[0].clientY };
    }
  };
  
  const handleTouchEnd = () => {
    mouseRef.current = { x: -9999, y: -9999 };
  };
  
  const handleClick = () => {
    setRadius((prev) => (prev >= 4 ? 1 : prev + 1));
  };
  
  // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
  const fullRestart = () => {
    if (!canvasRef.current || !ctxRef.current) return;
    
    // –û—á–∏—â–∞–µ–º canvas
    ctxRef.current.clearRect(0, 0, dimensionsRef.current.width, dimensionsRef.current.height);
    
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É
    initScene();
    
    console.log('üîÑ React-–∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞');
  };
  
  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  const handleTextChange = (e) => {
    setCanvasText(e.target.value);
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    setTimeout(initScene, 10);
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (!canvasRef.current) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    ctxRef.current = canvasRef.current.getContext('2d');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    initScene();
    requestAnimationFrame(animate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('touchmove', handleTouchMove);
    window.addEventListener('touchend', handleTouchEnd);
    window.addEventListener('click', handleClick);
    window.addEventListener('resize', initScene);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    window.reactInitScene = initScene;
    window.reactFullRestart = fullRestart;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const handleNavigationComplete = (e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      if (canvasRef.current) {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ React-–∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞:', e.detail.url);
        fullRestart();
      }
    };
    
    document.addEventListener('clientNavigationComplete', handleNavigationComplete);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('touchmove', handleTouchMove);
      window.removeEventListener('touchend', handleTouchEnd);
      window.removeEventListener('click', handleClick);
      window.removeEventListener('resize', initScene);
      document.removeEventListener('clientNavigationComplete', handleNavigationComplete);
      
      // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      delete window.reactInitScene;
      delete window.reactFullRestart;
    };
  }, []);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.value = canvasText;
    }
  }, [canvasText]);
  
  return (
    <div className={`particle-animation-container ${className}`}>
      <canvas 
        ref={canvasRef} 
        id="react-scene"
        className="absolute inset-0 w-full h-full"
      />
      
      <div className="text-input-container fixed bottom-8 w-full text-center z-40 flex flex-col items-center gap-2">
        <input
          ref={inputRef}
          type="text"
          defaultValue={canvasText}
          onChange={handleTextChange}
          className="w-64 h-10 text-center bg-transparent text-2xl border border-current rounded-lg"
        />
        <p className="text-sm opacity-60 hover:opacity-100 transition-opacity">
          –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º—ã—à—å—é
        </p>
      </div>
    </div>
  );
} 