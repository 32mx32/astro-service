---
// Этот компонент добавляет скрипт, который определяет текущую тему до рендеринга страницы
// и предотвращает мигание (flash of incorrect theme)
---

<script is:inline>
  // Этот скрипт выполняется до рендеринга страницы, чтобы избежать мигания неправильной темы
  (function() {
    function getThemePreference() {
      // Сначала проверяем сохраненное значение в localStorage
      const savedTheme = typeof localStorage !== 'undefined' && localStorage.getItem('theme');
      if (savedTheme) {
        return savedTheme;
      }
      
      // Если не найдено, проверяем системные настройки
      if (typeof window !== 'undefined' && window.matchMedia) {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }
      
      // По умолчанию используем светлую тему
      return 'light';
    }
    
    // Применяем тему к HTML-тегу
    const theme = getThemePreference();
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    // Создаем глобальный API для работы с темой
    window.themeManager = {
      getTheme: function() {
        return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      },
      setTheme: function(newTheme) {
        if (newTheme === 'dark') {
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        } else {
          document.documentElement.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        }
        // Отправляем событие изменения темы
        document.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: newTheme } }));
      },
      toggle: function() {
        const currentTheme = this.getTheme();
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        this.setTheme(newTheme);
        return newTheme;
      }
    };
  })();
</script> 