---
interface Props {
  defaultTheme?: 'light' | 'dark' | 'system';
  enableSystem?: boolean;
  storageKey?: string;
}

const {
  defaultTheme = 'system',
  enableSystem = true,
  storageKey = 'theme',
} = Astro.props;
---

<div id="theme-provider" data-default-theme={defaultTheme} data-enable-system={enableSystem.toString()} data-storage-key={storageKey}>
  <slot />
</div>

<script>
  // Эта часть выполняется только на клиенте
  class ThemeProvider {
    element: HTMLElement;
    defaultTheme: string;
    enableSystem: boolean;
    storageKey: string;
    
    constructor() {
      this.element = document.getElementById('theme-provider') as HTMLElement;
      
      if (!this.element) {
        console.error('Theme provider element not found');
        return;
      }
      
      this.defaultTheme = this.element.dataset.defaultTheme || 'system';
      this.enableSystem = this.element.dataset.enableSystem === 'true';
      this.storageKey = this.element.dataset.storageKey || 'theme';
      
      // Инициализация темы при загрузке страницы
      this.initialize();
      
      // Слушаем изменения в системной теме, если это разрешено
      if (this.enableSystem) {
        this.listenForSystemChanges();
      }
    }
    
    initialize() {
      // Если глобальный API темы уже инициализирован из ThemeScript, пропускаем
      if (window.themeManager) {
        return;
      }
      
      // Создаем новый themeManager
      window.themeManager = {
        getTheme: () => {
          return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
        },
        setTheme: (theme: string) => {
          if (theme === 'system') {
            localStorage.removeItem(this.storageKey);
            this.applySystemTheme();
          } else {
            localStorage.setItem(this.storageKey, theme);
            this.applyTheme(theme);
          }
          
          document.dispatchEvent(new CustomEvent('themeChanged', {
            detail: { theme }
          }));
        },
        toggle: () => {
          const current = this.getCurrentTheme();
          const newTheme = current === 'dark' ? 'light' : 'dark';
          window.themeManager.setTheme(newTheme);
          return newTheme;
        }
      };
      
      // Применяем начальную тему
      this.applyInitialTheme();
    }
    
    applyInitialTheme() {
      // Проверяем сохраненную тему
      const savedTheme = localStorage.getItem(this.storageKey);
      
      if (savedTheme) {
        this.applyTheme(savedTheme);
      } else if (this.defaultTheme === 'system' && this.enableSystem) {
        this.applySystemTheme();
      } else {
        this.applyTheme(this.defaultTheme);
      }
    }
    
    applyTheme(theme: string) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    }
    
    applySystemTheme() {
      const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      this.applyTheme(isDark ? 'dark' : 'light');
    }
    
    getCurrentTheme() {
      return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    }
    
    listenForSystemChanges() {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      
      // Обработчик изменения системной темы
      const handleChange = () => {
        const savedTheme = localStorage.getItem(this.storageKey);
        if (!savedTheme) {
          this.applySystemTheme();
        }
      };
      
      // Современный способ слушать изменения
      mediaQuery.addEventListener('change', handleChange);
    }
  }
  
  // Инициализируем ThemeProvider после загрузки DOM
  document.addEventListener('DOMContentLoaded', () => {
    new ThemeProvider();
  });
</script> 