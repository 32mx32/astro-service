---
// Импортируем глобальные стили Tailwind
import '../styles/global.css';
// Импортируем настройки тем
import '../styles/theme.css';
// Импортируем компонент для предотвращения мигания темы
import ThemeScript from '../components/ThemeScript.astro';
// Импортируем ThemeProvider для управления темой
import ThemeProvider from '../context/ThemeProvider.astro';
import Navbar from '../components/navbar/Navbar.astro';

interface Props {
	title?: string;
}

const { title = "Astro Современный Проект" } = Astro.props;
---

<!doctype html>
<html lang="ru" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- Подключаем ThemeScript перед любыми другими скриптами и стилями -->
		<ThemeScript />
		
		<style>
			/* Стили вынесены в theme.css, оставляем только специфичные */
			body {
				margin: 0;
				overflow: hidden;
				font-size: 16px;
				font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
				background-color: var(--background-color);
				color: var(--text-color);
			}
			
			canvas {
				background: var(--background-color);
				width: 100vw;
				height: 100vh;
			}
			
			/* Стиль для плавного появления контента */
			.content-wrapper {
				opacity: 0;
				animation: fadeIn 0.5s ease forwards;
				animation-delay: 0.1s;
			}
			
			@keyframes fadeIn {
				from { opacity: 0; }
				to { opacity: 1; }
			}
		</style>
	</head>
	<body>
		<!-- Оборачиваем весь контент в ThemeProvider -->
		<ThemeProvider defaultTheme="system" enableSystem={true}>
			<div class="content-wrapper">
				<Navbar />
				<slot />
			</div>
		</ThemeProvider>
		
		<script>
			// Оптимизированный скрипт управления темой
			document.addEventListener('DOMContentLoaded', () => {
				const themeToggle = document.getElementById('theme-toggle');
				
				// Функция для обновления значков
				function updateToggleIcons() {
					const sunIcon = document.querySelector('.sun-icon');
					const moonIcon = document.querySelector('.moon-icon');
					
					if (sunIcon && moonIcon) {
						const isDark = document.documentElement.classList.contains('dark');
						// Используем прозрачность вместо display для плавного перехода
						sunIcon.style.opacity = isDark ? '0' : '1';
						moonIcon.style.opacity = isDark ? '1' : '0';
					}
				}
				
				// Обработчик переключения темы
				if (themeToggle) {
					themeToggle.addEventListener('click', () => {
						// Используем API ThemeManager
						if (window.themeManager) {
							window.themeManager.toggle();
							updateToggleIcons();
						}
					});
					
					// Инициализация
					updateToggleIcons();
					
					// Прослушиваем событие изменения темы
					document.addEventListener('themeChanged', () => {
						updateToggleIcons();
						
						// Вызываем перерисовку анимации при изменении темы
						if (window.initScene) {
							window.initScene();
						}
					});
				}
			});
		</script>
	</body>
</html>