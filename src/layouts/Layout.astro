---
// Импортируем глобальные стили Tailwind
import '../styles/global.css';

interface Props {
	title?: string;
}

const { title = "Astro Современный Проект" } = Astro.props;
---

<!doctype html>
<html lang="ru" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- Подключение полной версии tsParticles -->
		<script is:inline src="https://cdn.jsdelivr.net/npm/tsparticles@2.12.0/tsparticles.bundle.min.js"></script>
		
		<style>
			/* Стили для контейнера частиц */
			#tsparticles {
				position: fixed;
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
				z-index: 10;
			}
			
			/* Стили для основного контента, чтобы он был поверх анимации */
			.content-wrapper {
				position: relative;
				z-index: 20;
			}
			
			/* Скрытый текст для создания формы */
			.particles-text {
				position: absolute;
				top: -9999px;
				left: -9999px;
				font-size: 80px;
				font-weight: 700;
				font-family: sans-serif;
			}
		</style>
	</head>
	<body class="min-h-screen bg-gray-900 dark:bg-black text-gray-800 dark:text-gray-200">
		<!-- Контейнер для частиц -->
		<div id="tsparticles"></div>
		
		<!-- Скрытый текст для формирования частиц -->
		<div class="particles-text" id="particles-text">CODEPEN</div>
		
		<!-- Обертка для основного контента -->
		<div class="content-wrapper">
			<slot />
		</div>
		
		<!-- Инициализация tsParticles -->
		<script is:inline>
			// Дожидаемся полной загрузки страницы
			window.addEventListener('load', function() {
				if (typeof tsParticles === 'undefined') {
					console.error('tsParticles не загружен');
					return;
				}
				
				// Определяем текущую тему
				const isDarkMode = document.documentElement.classList.contains('dark');
				const particleColor = isDarkMode ? "#ffffff" : "#ffffff";
				
				// Инициализируем tsParticles
				tsParticles.load("tsparticles", {
					fullScreen: {
						enable: false
					},
					background: {
						color: "#000"
					},
					particles: {
						number: {
							value: 1000,
							density: {
								enable: true,
								value_area: 800
							}
						},
						color: {
							value: particleColor
						},
						shape: {
							type: "circle"
						},
						opacity: {
							value: 1,
							random: false,
							anim: {
								enable: true,
								speed: 1,
								opacity_min: 0.4,
								sync: false
							}
						},
						size: {
							value: 3,
							random: true,
							anim: {
								enable: false,
								speed: 3,
								size_min: 0.5,
								sync: false
							}
						},
						line_linked: {
							enable: false
						},
						move: {
							enable: true,
							speed: 3,
							direction: "none",
							random: true,
							straight: false,
							out_mode: "out",
							bounce: false,
							attract: {
								enable: false,
								rotateX: 600,
								rotateY: 1200
							}
						}
					},
					interactivity: {
						detect_on: "canvas",
						events: {
							onhover: {
								enable: true,
								mode: "bubble"
							},
							onclick: {
								enable: true,
								mode: "repulse"
							},
							resize: true
						},
						modes: {
							grab: {
								distance: 400,
								line_linked: {
									opacity: 1
								}
							},
							bubble: {
								distance: 250,
								size: 0,
								duration: 2,
								opacity: 0,
								speed: 3
							},
							repulse: {
								distance: 400,
								duration: 0.4
							},
							push: {
								particles_nb: 4
							},
							remove: {
								particles_nb: 2
							}
						}
					},
					retina_detect: true,
					// Настройки для формирования текста
					emitters: [],
					absorbers: [],
					infections: [],
					polygon: {
						enable: true,
						type: "inline",
						inline: {
							arrangement: "one-per-point"
						},
						draw: {
							enable: true,
							stroke: {
								width: 1,
								color: "rgba(255,255,255,0.2)"
							}
						},
						move: {
							radius: 10,
							type: "path"
						},
						url: "",
						// Использование скрытого текста для формы
						element: document.getElementById("particles-text")
					}
				})
				.then((container) => {
					console.log("tsParticles успешно инициализирован");
					
					// Анимация разлета и сбора частиц
					let isExploded = false;
					
					// Функция для эффекта взрыва и сбора
					const toggleExplode = () => {
						const container = tsParticles.domItem(0);
						if (!container) return;
						
						if (isExploded) {
							// Собираем частицы обратно в текст
							container.options.polygon.enable = true;
							container.options.particles.move.speed = 10;
							container.options.particles.move.direction = "none";
							container.options.particles.move.straight = false;
							container.options.particles.move.random = true;
						} else {
							// Разлетаются от текста
							container.options.polygon.enable = false;
							container.options.particles.move.speed = 15;
							container.options.particles.move.direction = "outside";
							container.options.particles.move.straight = true;
							container.options.particles.move.random = false;
						}
						
						isExploded = !isExploded;
						container.refresh();
						
						// Не создаем автоматический цикл анимации
						// setTimeout(toggleExplode, 5000);
					};
					
					// Запуск анимации через 2 секунды после загрузки
					setTimeout(toggleExplode, 2000);
					
					// Добавляем функцию в глобальную область видимости для управления анимацией
					window.toggleAnimation = toggleExplode;
					
					// Добавляем прослушиватель для изменения темы
					const themeToggle = document.getElementById('theme-toggle');
					if (themeToggle) {
						themeToggle.addEventListener('click', function() {
							const isDark = document.documentElement.classList.contains('dark');
							const newColor = isDark ? "#ffffff" : "#ffffff";
							
							// Получаем контейнер и обновляем его настройки
							const container = tsParticles.domItem(0);
							if (container) {
								container.options.particles.color.value = newColor;
								container.refresh();
							}
						});
					}
				})
				.catch(error => {
					console.error("Ошибка при инициализации tsParticles:", error);
				});
			});
		</script>
	</body>
</html>

<!-- Удаляем стандартные стили, так как будем использовать Tailwind -->
